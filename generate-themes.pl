#!/usr/bin/perl
use strict;

use constant THEMES_OUTDIR => './res/values-v21/';
use constant ENUM_OUTDIR   => './src/ch/blinkenlights/android/vanilla/';
use constant THEMES_LIST   => './res/values-v21/themes-list.xml';

my $THEMES = [
	{
		_name => 'standard',
		light => { colorAccent => '#ff3e677a', colorPrimary => '#ff37474f', colorPrimaryDark => '#ff263238', controlsNormal=>'@color/material_grey_900', _bg => '#fff0f0f0' },
		dark  => { colorAccent => '#ff3e677a', colorPrimary => '#ff37474f', colorPrimaryDark => '#ff263238', controlsNormal=>'@color/material_grey_300', _bg => '#ff2a2a2a' },
	},
	{
		_name => 'greyish',
		light => { colorAccent => '#ff000000', colorPrimary => '#ff212121', colorPrimaryDark => '#ff090909', controlsNormal=>'@color/material_grey_600', _bg => '#fff0f0f0' },
		dark  => { colorAccent => '#ffd8d8d8', colorPrimary => '#ff212121', colorPrimaryDark => '#ff090909', controlsNormal=>'@color/material_grey_600', _bg => '#ff2a2a2a' },
	},
	{
		_name => 'black',
		dark  => { colorAccent => '#ffd8d8d8', colorPrimary => '#ff000000', colorPrimaryDark => '#ff000000', controlsNormal=>'@color/material_grey_600', _bg => '#ff000000' },
	},
	{
		_name => 'orange',
		light => { colorAccent => '#FFF57F17', colorPrimary => '#FFE65100', colorPrimaryDark => '#FFBF360C', controlsNormal=>'@color/material_grey_900', _bg => '#fff0f0f0' },
		dark  => { colorAccent => '#FFF57F17', colorPrimary => '#FFE65100', colorPrimaryDark => '#FFBF360C', controlsNormal=>'@color/material_grey_300', _bg => '#ff2a2a2a' },
	},
	{
		_name => 'blue',
		light => { colorAccent => '#FF03A9F4', colorPrimary => '#FF0277BD', colorPrimaryDark => '#FF01579B', controlsNormal=>'@color/material_grey_900', _bg => '#fff0f0f0' },
		dark  => { colorAccent => '#FF03A9F4', colorPrimary => '#FF0277BD', colorPrimaryDark => '#FF01579B', controlsNormal=>'@color/material_grey_300', _bg => '#ff2a2a2a' },
	},
	{
		_name => 'red',
		light => { colorAccent => '#ffd50000', colorPrimary => '#ffc62828', colorPrimaryDark => '#ffb71c1c', controlsNormal=>'@color/material_grey_900', _bg => '#fff0f0f0' },
		dark  => { colorAccent => '#ffd50000', colorPrimary => '#ffc62828', colorPrimaryDark => '#ffb71c1c', controlsNormal=>'@color/material_grey_300', _bg => '#ff2a2a2a' },
	},
];


my $XML_ARRAYS    = {};
my $THEME_ID = 0;
my $ENUMFILE = ENUM_OUTDIR."ThemeEnum.java";
my $ENUMBUFF = get_theme_enum(@$THEMES);

open(OUT, ">", $ENUMFILE) or die "Can not write to $ENUMFILE: $!\n";
print OUT $ENUMBUFF;
close(OUT);

foreach my $theme_ref (@$THEMES) {
	my $theme_name = $theme_ref->{_name};
	my $theme_id = ($theme_name eq 'standard' ? '' : ucfirst($theme_name)."."); # standard has no prefix
	my $outfile  = THEMES_OUTDIR."/theme-$theme_name.xml";
	my $outbuff  = get_theme_xml($theme_ref, $theme_id);

	open(OUT, ">", $outfile) or die "Can not write to $outfile: $!\n";
	print OUT $outbuff;
	close(OUT);

	foreach my $line (split(/\n/, $outbuff)) {
		if (my ($style) = $line =~ /style name=\"([^"]+)\"/) {
			my $category = "theme_category_".lc((split(/\./, $style))[-1]);
			push(@{$XML_ARRAYS->{'integer-array'}->{$category}}, '@style/'.$style);
		}
	}

	# use this loop to also populate the theme list output
	foreach my $variant ('', 'Dark.') {
		my $tvvar = ($variant eq '' ? 'light' : 'dark');
		if (exists $theme_ref->{$tvvar}) {
			my $tvarr = join(",",
				map {$theme_ref->{$tvvar}->{$_}} qw(colorPrimaryDark _bg colorPrimary));

			# user visible names of themes
			push(@{$XML_ARRAYS->{'string-array'}->{theme_entries}},
				$variant . ucfirst($theme_name));
			# csv list of theme info, such as its id and the primary colors to show in preview
			push(@{$XML_ARRAYS->{'string-array'}->{theme_values}}, ($THEME_ID) . "," . $tvarr);
			$THEME_ID++;
		}
	}
}


open(OUT, ">", THEMES_LIST) or die "Cannot write theme list: $!\n";
print OUT << "EOLIST";
<?xml version="1.0" encoding="utf-8"?>
<!-- THIS FILE IS AUTOGENERATED BY generate-themes.pl - DO NOT TOUCH! -->
<resources>
EOLIST
while(my($array_type, $lists) = each(%$XML_ARRAYS)) {
	while(my($name, $items) = each(%$lists)) {
		print OUT "\t<$array_type name=\"$name\">\n";
		foreach my $item (@$items) {
			print OUT "\t\t<item>$item</item>\n";
		}
		print OUT "\t</$array_type>\n\n";
	}
}
print OUT "</resources>\n";

close(OUT);






sub get_theme_xml {
	my ($this, $tid) = @_;
	my $DATA = << "EOF";
<?xml version="1.0" encoding="utf-8"?>
<!--

 *** THIS FILE WAS GENERATED BY 'generate-themes.pl' - DO NOT TOUCH ***

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<resources>
EOF
	if (exists $this->{'light'}) {
		$DATA = $DATA . << "EOF";
	<style name="${tid}VanillaBase" parent="android:Theme.Material.Light.DarkActionBar">
		<item name="overlay_background_color">\@color/overlay_background_light</item>
		<item name="overlay_foreground_color">\@color/overlay_foreground_light</item>
		<item name="float_color">\@color/material_grey_400</item>
		<item name="background_circle_color">\@color/material_grey_300</item>
		<item name="tabs_background">$this->{light}->{colorPrimary}</item>
		<item name="now_playing_marker">$this->{light}->{colorAccent}</item>
		<item name="controls_normal">$this->{light}->{controlsNormal}</item>
		<item name="controls_active">$this->{light}->{colorAccent}</item>
		<item name="android:colorAccent">$this->{light}->{colorAccent}</item>
		<item name="android:colorPrimary">$this->{light}->{colorPrimary}</item>
		<item name="android:colorPrimaryDark">$this->{light}->{colorPrimaryDark}</item>
	</style>

	<style name="${tid}Playback" parent="${tid}VanillaBase">
		<item name="android:actionBarStyle">\@style/Universal.PlaybackActionBar</item>
	</style>

	<style name="${tid}BackActionBar" parent="${tid}VanillaBase">
		<item name="android:actionBarStyle">\@style/Universal.PlaybackActionBar</item>
	</style>

	<style name="${tid}Library" parent="${tid}VanillaBase">
		<item name="android:windowActionBar">false</item>
		<item name="android:windowNoTitle">true</item>
	</style>

	<style name="${tid}PopupDialog" parent="android:Theme.Material.Light.Dialog.MinWidth">
		<item name="background_circle_color">\@color/material_grey_300</item>
		<item name="controls_normal">$this->{light}->{controlsNormal}</item>
		<item name="controls_active">$this->{light}->{colorAccent}</item>
	</style>
EOF
	}
	if (exists $this->{'dark'}) {
		$DATA =  $DATA . << "EOF";

	<!-- dark theme -->
	<style name="${tid}Dark.VanillaBase" parent="android:Theme.Material">
		<item name="overlay_background_color">\@color/overlay_background_dark</item>
		<item name="overlay_foreground_color">\@color/overlay_foreground_dark</item>
		<item name="float_color">\@color/material_grey_900</item>
		<item name="background_circle_color">\@color/material_grey_700</item>
		<item name="tabs_background">$this->{dark}->{colorPrimary}</item>
		<item name="now_playing_marker">$this->{dark}->{colorAccent}</item>
		<item name="controls_normal">$this->{dark}->{controlsNormal}</item>
		<item name="controls_active">$this->{dark}->{colorAccent}</item>
		<item name="android:colorAccent">$this->{dark}->{colorAccent}</item>
		<item name="android:colorPrimary">$this->{dark}->{colorPrimary}</item>
		<item name="android:colorPrimaryDark">$this->{dark}->{colorPrimaryDark}</item>
	</style>

	<style name="${tid}Dark.Playback" parent="${tid}Dark.VanillaBase">
		<item name="android:actionBarStyle">\@style/Universal.PlaybackActionBar</item>
	</style>

	<style name="${tid}Dark.BackActionBar" parent="${tid}Dark.VanillaBase">
		<item name="android:actionBarStyle">\@style/Universal.PlaybackActionBar</item>
	</style>

	<style name="${tid}Dark.Library" parent="${tid}Dark.VanillaBase">
		<item name="android:windowActionBar">false</item>
		<item name="android:windowNoTitle">true</item>
	</style>

	<style name="${tid}Dark.PopupDialog" parent="android:Theme.Material.Dialog.MinWidth">
		<item name="background_circle_color">\@color/material_grey_700</item>
		<item name="controls_normal">$this->{dark}->{controlsNormal}</item>
		<item name="controls_active">$this->{dark}->{colorAccent}</item>
	</style>

EOF
	}
	$DATA = $DATA . << "EOF";
</resources>
EOF

	return $DATA
}

# Creates the ThemeEnum.java file
sub get_theme_enum {
	my $enumValues;
	my $enumKey = 0;
	foreach my $value (@_) {
		foreach my $variant ('', 'Dark.') {
			my $tvvar = ($variant eq '' ? 'light' : 'dark');
			if (exists $value->{$tvvar}) {
				# appends the next value each iteration
				$enumValues = uc $enumValues . $tvvar . '_' . $value->{_name} . '(' . $enumKey . '),';
				$enumKey++;
			}
		}
	}
	# strips the last comma from the string
	$enumValues = substr $enumValues, 0, -1;
	return << "EOF";
package ch.blinkenlights.android.vanilla;

import android.util.SparseArray;

public enum ThemeEnum {
    $enumValues;

    private static SparseArray<ThemeEnum> map = new SparseArray<>();

    static {
        for (ThemeEnum themeEnum : ThemeEnum.values()) {
            map.put(themeEnum._index, themeEnum);
        }
    }

    private int _index;

    ThemeEnum(final int index) {
        _index = index;
    }

    public static ThemeEnum valueOf(int index) {
        return map.get(index);
    }
}

EOF

}
